#!/bin/bash

function test {
  KBASE_ENDPOINT=ENDPOINT_TEST \
  ORCID_OAUTH_BASE_URL=https://sandbox.orcid.org/oauth \
  ORCID_API_BASE_URL=https://api.sandbox.orcid.org/v3.0 \
  ORCID_CLIENT_ID=ORCID_CLIENT_ID_TEST \
  ORCID_CLIENT_SECRET=ORCID_CLIENT_SECRET_TEST \
  MONGO_HOST=mongo \
  MONGO_PORT=27017 \
  MONGO_DATABASE=orcidlink \
  MONGO_USERNAME=dev \
  MONGO_PASSWORD=d3v \
  docker compose -f docker-compose-testing.yml run --rm orcidlink scripts/run-tests.sh "${1}"
}

function mypy {
    docker compose -f docker-compose-runner.yml run --rm orcidlink scripts/run-mypy.sh
}

function black {
  docker compose -f docker-compose-runner.yml run --rm orcidlink scripts/run-black.sh "${1}" "${2}"
}

function git-info {
  docker compose -f docker-compose-runner.yml run --rm orcidlink poetry run python src/misc/git-info.py
}

function shell {
  docker compose -f docker-compose-runner.yml run --rm orcidlink bash
}

function server {
  docker compose -f docker-compose-prod-like.yml
}

function dev {
  KBASE_ENDPOINT=https://ci.kbase.us/services/ \
  ORCID_OAUTH_BASE_URL=https://sandbox.orcid.org/oauth \
  ORCID_API_BASE_URL=https://api.sandbox.orcid.org/v3.0 \
  ORCID_CLIENT_ID=${ORCID_CLIENT_ID} \
  ORCID_CLIENT_SECRET=${ORCID_CLIENT_SECRET} \
  MONGO_HOST=mongo \
  MONGO_PORT=27017 \
  MONGO_DATABASE=orcidlink \
  MONGO_USERNAME=dev \
  MONGO_PASSWORD=d3v \
  docker compose -f docker-compose-dev.yml up
}

function server {
  KBASE_ENDPOINT=https://ci.kbase.us/services/ \
  ORCID_OAUTH_BASE_URL=https://sandbox.orcid.org/oauth \
  ORCID_API_BASE_URL=https://api.sandbox.orcid.org/v3.0 \
  ORCID_CLIENT_ID=${ORCID_CLIENT_ID} \
  ORCID_CLIENT_SECRET=${ORCID_CLIENT_SECRET} \
  MONGO_HOST=mongo \
  MONGO_PORT=27017 \
  MONGO_DATABASE=orcidlink \
  MONGO_USERNAME=dev \
  MONGO_PASSWORD=d3v \
  docker compose -f docker-compose-prod-like.yml up
}

# For building a prod-like image locally
function build-image {
  docker build -t kbase/orcidlink:dev .
}

#
# Generates the openapi spec in memory, and compares it to the one already existing in docs/api/openapi.json.
# Returns a success if identical, error (1) if there are any differences.
#
function check-openapi {
  docker compose -f docker-compose-runner.yml run --rm orcidlink  poetry run python src/misc/check-openapi.py
}

#
# Generates the openapi.json spec file at docs/api/openapi.json
#
function generate-openapi {
  docker compose -f docker-compose-runner.yml run --rm orcidlink  poetry run python src/misc/generate-openapi.py
}

#
# Generates markdown + html api docs from a given openapi.json spec file, placing the resulting document
# at docs/api/index.md. A development-time preview which utilizes an approximation of GitHub styles, is
# also generated at docs/api/index.html.
#
function generate-docs {
  rm -rf docs/api/openapi/*
  docker compose -f docker-compose-runner.yml run --rm orcidlink  poetry run python src/misc/generate-docs.py
}

#
# This was the first attempt at generating API docs, but was not suitable for generation of
# docs which could be viewed at GitHub. Left here for posterity, and because maybe we can get
# it to work better.
#
function generate-apidocs {
    rm -rf docs/api/openapi/*
    docker run --rm \
      -v "${PWD}:/kb/module" openapitools/openapi-generator-cli generate \
      -i /kb/module/docs/api/openapi.json \
      -g markdown \
      -o /kb/module/docs/api/openapi
}

# For running a prod-like image locally
function run-image {
  # NB There should be a mongo db running at the indicated
  # host and port with the indicated auth
  docker run \
    -e KBASE_ENDPOINT=https://ci.kbase.us/services/ \
    -e ORCID_OAUTH_BASE_URL=https://sandbox.orcid.org/oauth \
    -e ORCID_API_BASE_URL=https://api.sandbox.orcid.org/v3.0 \
    -e ORCID_CLIENT_ID=${ORCID_CLIENT_ID} \
    -e ORCID_CLIENT_SECRET=${ORCID_CLIENT_SECRET} \
    -e MONGO_HOST=mongo \
    -e MONGO_PORT=27017 \
    -e MONGO_DATABASE=orcidlink \
    -e MONGO_USERNAME=dev \
    -e MONGO_PASSWORD=d3v \
    --pull always \
    --stop-signal SIGINT \
    --dns 8.8.8.8 \
    --network kbase-dev \
    --name orcidlink \
    --hostname orcidlink \
    --rm \
    "${1:-kbase/orcidlink:dev}"
}

function help {
    echo "$0 <task> <args>"
    echo "Runs the tasks listed below."
    echo "To find out more about them, either read the source"
    echo "for ${0} or the docs located in 'docs/tasks.md'."
    echo "Tasks:"
    compgen -A function | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-default}"
